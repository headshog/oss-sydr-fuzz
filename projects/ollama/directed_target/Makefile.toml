# Copyright 2025 ISP RAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

# Variables
[env]
PROJECT_DIR = { script = ["pwd"], condition = { env_not_set = ["PROJECT_DIR"] } }
EXAMPLE_DIR = { value = "/ollama" }
EXAMPLE_DIR_INSTR = { value = "/ollama-instr" }
DIFUZZ_DIR = { value = "/directed_target/sydr/difuzz", condition = { env_not_set = ["DIFUZZ_DIR"] } }
DIFUZZ_DIR_ABS = { script = ["realpath ${DIFUZZ_DIR}"] }
LIBFORKSERVER_DIR = { value = "${DIFUZZ_DIR_ABS}", condition = { env_not_set = ["LIBFORKSERVER_DIR"] } }
LIBFORKSERVER_DIR_ABS = { script = ["realpath ${LIBFORKSERVER_DIR}"] }
OUT_DIR = { value = "${PROJECT_DIR}", condition = { env_not_set = ["OUT_DIR"] } }
OUT_DIR_ABS = { script = ["realpath ${OUT_DIR}"] }
DIFUZZ_ARGS = { value = "--weights reverse -o difuzz -j8", condition = { env_not_set = ["DIFUZZ_ARGS"] } }
CARGO_TARGET_DIR = { value = "${PROJECT_DIR}/target", condition = { env_not_set = [
  "CARGO_TARGET_DIR",
] } }
PROFILE = { value = "release", condition = { env_not_set = ["PROFILE"] } }
FUZZER = '${DIFUZZ_DIR_ABS}/libafl_difuzz'
GOINSTR_DIFUZZ = '${DIFUZZ_DIR_ABS}/goinstr_difuzz'
GOINSTR_SANCOV = '${DIFUZZ_DIR_ABS}/goinstr_sancov'
GOINSTR_COVERAGE = '${DIFUZZ_DIR_ABS}/goinstr_coverage'

[tasks.unsupported]
script_runner = "@shell"
script = '''
echo "Cargo-make not integrated yet on this"
'''

[tasks.debug]
linux_alias = "debug_unix"
mac_alias = "debug_unix"
windows_alias = "unsupported"

[tasks.debug_unix]
script_runner = "@shell"
script = '''
cd ${EXAMPLE_DIR}/sydr/convert/tokenizer
go build -o ${OUT_DIR_ABS}/convert_tokenizer_sydr
cd ${EXAMPLE_DIR}/sydr/convert/vocabulary
go build -o ${OUT_DIR_ABS}/convert_vocabulary_sydr
cd ${EXAMPLE_DIR}/sydr/parser/parsefile
go build -o ${OUT_DIR_ABS}/parser_parsefile_sydr
cd ${EXAMPLE_DIR}/sydr/server/manifest
go build -o ${OUT_DIR_ABS}/server_manifest_sydr
cd ${EXAMPLE_DIR}/sydr/server/newlayer
go build -o ${OUT_DIR_ABS}/server_newlayer_sydr
cd ${EXAMPLE_DIR}/sydr/thinking/content
go build -o ${OUT_DIR_ABS}/thinking_content_sydr
cd ${EXAMPLE_DIR}/sydr/thinking/state
go build -o ${OUT_DIR_ABS}/thinking_state_sydr
cd ${EXAMPLE_DIR}/sydr/thinking/eat
go build -o ${OUT_DIR_ABS}/thinking_eat_sydr
cd ${EXAMPLE_DIR}/sydr/harmony/parser
go build -o ${OUT_DIR_ABS}/harmony_parser_sydr
cd ${EXAMPLE_DIR}/sydr/wordpiece/encode
go build -o ${OUT_DIR_ABS}/wordpiece_sydr
'''

[tasks.coverage]
linux_alias = "coverage_unix"
mac_alias = "coverage_unix"
windows_alias = "unsupported"

[tasks.coverage_unix]
script_runner = "@shell"
script = '''
cd ${EXAMPLE_DIR}
${GOINSTR_COVERAGE} -i sydr/convert/tokenizer/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/convert_tokenizer_coverage sydr/convert/tokenizer/main.go
${GOINSTR_COVERAGE} -i sydr/convert/tokenizer/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/convert/vocabulary/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/convert_vocabulary_coverage sydr/convert/vocabulary/main.go
${GOINSTR_COVERAGE} -i sydr/convert/vocabulary/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/parser/parsefile/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/parser_parsefile_coverage sydr/parser/parsefile/main.go
${GOINSTR_COVERAGE} -i sydr/parser/parsefile/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/server/manifest/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/server_manifest_coverage sydr/server/manifest/main.go
${GOINSTR_COVERAGE} -i sydr/server/manifest/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/server/newlayer/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/server_newlayer_coverage sydr/server/newlayer/main.go
${GOINSTR_COVERAGE} -i sydr/server/newlayer/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/thinking/content/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/thinking_content_coverage sydr/thinking/content/main.go
${GOINSTR_COVERAGE} -i sydr/thinking/content/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/thinking/state/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/thinking_state_coverage sydr/thinking/state/main.go
${GOINSTR_COVERAGE} -i sydr/thinking/state/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/thinking/eat/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/thinking_eat_coverage sydr/thinking/eat/main.go
${GOINSTR_COVERAGE} -i sydr/thinking/eat/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/harmony/parser/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/harmony_parser_coverage sydr/harmony/parser/main.go
${GOINSTR_COVERAGE} -i sydr/harmony/parser/main.go -a remove -l info

${GOINSTR_COVERAGE} -i sydr/wordpiece/encode/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... -o ${OUT_DIR_ABS}/wordpiece_coverage sydr/wordpiece/encode/main.go
${GOINSTR_COVERAGE} -i sydr/wordpiece/encode/main.go -a remove -l info
'''

[tasks.difuzz]
linux_alias = "difuzz_unix"
mac_alias = "difuzz_unix"
windows_alias = "unsupported"

[tasks.difuzz_unix]
script_runner = "@shell"
script = '''
${DIFUZZ_DIR_ABS}/difuzz-go -r tokenizer.main  -c ${PROJECT_DIR}/config_convert_tokenizer.toml  -p ${EXAMPLE_DIR}/sydr/convert/tokenizer/main.go  -e ${OUT_DIR_ABS}/ets_convert_tokenizer.toml  ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r vocabulary.main -c ${PROJECT_DIR}/config_convert_vocabulary.toml -p ${EXAMPLE_DIR}/sydr/convert/vocabulary/main.go -e ${OUT_DIR_ABS}/ets_convert_vocabulary.toml ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r parsefile.main  -c ${PROJECT_DIR}/config_parser_parsefile.toml   -p ${EXAMPLE_DIR}/sydr/parser/parsefile/main.go   -e ${OUT_DIR_ABS}/ets_parser_parsefile.toml   ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r manifest.main   -c ${PROJECT_DIR}/config_server_manifest.toml    -p ${EXAMPLE_DIR}/sydr/server/manifest/main.go    -e ${OUT_DIR_ABS}/ets_server_manifest.toml    ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r newlayer.main   -c ${PROJECT_DIR}/config_server_newlayer.toml    -p ${EXAMPLE_DIR}/sydr/server/newlayer/main.go    -e ${OUT_DIR_ABS}/ets_server_newlayer.toml    ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r content.main    -c ${PROJECT_DIR}/config_thinking_content.toml   -p ${EXAMPLE_DIR}/sydr/thinking/content/main.go   -e ${OUT_DIR_ABS}/ets_thinking_content.toml   ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r state.main      -c ${PROJECT_DIR}/config_thinking_state.toml     -p ${EXAMPLE_DIR}/sydr/thinking/state/main.go     -e ${OUT_DIR_ABS}/ets_thinking_state.toml     ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r eat.main        -c ${PROJECT_DIR}/config_thinking_eat.toml       -p ${EXAMPLE_DIR}/sydr/thinking/eat/main.go       -e ${OUT_DIR_ABS}/ets_thinking_eat.toml       ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r parser.main     -c ${PROJECT_DIR}/config_harmony_parser.toml     -p ${EXAMPLE_DIR}/sydr/harmony/parser/main.go     -e ${OUT_DIR_ABS}/ets_harmony_parser.toml     ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r encode.main     -c ${PROJECT_DIR}/config_wordpiece.toml          -p ${EXAMPLE_DIR}/sydr/wordpiece/encode/main.go   -e ${OUT_DIR_ABS}/ets_wordpiece.toml          ${DIFUZZ_ARGS}
'''

[tasks.target]
linux_alias = "target_unix"
mac_alias = "target_unix"
windows_alias = "unsupported"

[tasks.target_unix]
script_runner = "@shell"
script = '''
${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_convert_tokenizer.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/convert/tokenizer
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_convert_tokenizer
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_convert_tokenizer.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_convert_vocabulary.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/convert/vocabulary
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_convert_vocabulary
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_convert_vocabulary.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_parser_parsefile.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/parser/parsefile
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_parser_parsefile
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_parser_parsefile.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_server_manifest.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/server/manifest
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_server_manifest
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_server_manifest.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_server_newlayer.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/server/newlayer
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_server_newlayer
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_server_newlayer.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_thinking_content.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/thinking/content
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_thinking_content
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_thinking_content.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_thinking_state.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/thinking/state
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_thinking_state
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_thinking_state.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_thinking_eat.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/thinking/eat
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_thinking_eat
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_thinking_eat.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_harmony_parser.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/harmony/parser
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_harmony_parser
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_harmony_parser.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_wordpiece.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/sydr/wordpiece/encode
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_wordpiece
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_wordpiece.toml -keep-ets -l info
'''
dependencies = ["difuzz"]

# Clean all built artifacts
[tasks.cleanall]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
rm -rf corpus crashes target ${CARGO_TARGET_DIR} difuzz difuzz_target_* debug_* coverage_* Cargo.lock ets.toml fuzzer.log target.log .cur_input* 
pkill difuzz_ || true
'''

[tasks.all]
linux_alias = "all_unix"
mac_alias = "all_unix"
windows_alias = "unsupported"

[tasks.all_unix]
dependencies = ["target", "debug", "coverage"]
