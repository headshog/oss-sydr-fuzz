# Variables
[env]
PROJECT_DIR = { script = ["pwd"], condition = { env_not_set = ["PROJECT_DIR"] } }
EXAMPLE_DIR = { value = "/image" }
DIFUZZ_DIR = { value = "/directed_target/sydr/difuzz", condition = { env_not_set = ["DIFUZZ_DIR"] } }
DIFUZZ_DIR_ABS = { script = ["realpath ${DIFUZZ_DIR}"] }
OUT_DIR = { value = "${PROJECT_DIR}", condition = { env_not_set = ["OUT_DIR"] } }
OUT_DIR_ABS = { script = ["realpath ${OUT_DIR}"] }
DIFUZZ_ARGS = { value = "-r webp.main --weights reverse -o difuzz -j8", condition = { env_not_set = ["DIFUZZ_ARGS"] } }
CARGO_TARGET_DIR = { value = "${PROJECT_DIR}/target", condition = { env_not_set = [
  "CARGO_TARGET_DIR",
] } }
PROFILE = { value = "release", condition = { env_not_set = ["PROFILE"] } }
FUZZER = '${DIFUZZ_DIR_ABS}/libafl_difuzz'
GOINSTR_DIFUZZ = '${DIFUZZ_DIR_ABS}/goinstr_difuzz'
GOINSTR_SANCOV = '${DIFUZZ_DIR_ABS}/goinstr_sancov'
GOINSTR_COVERAGE = '${DIFUZZ_DIR_ABS}/goinstr_coverage'

[tasks.unsupported]
script_runner = "@shell"
script = '''
echo "Cargo-make not integrated yet on this"
'''

[tasks.debug]
linux_alias = "debug_unix"
mac_alias = "debug_unix"
windows_alias = "unsupported"

[tasks.debug_unix]
script_runner = "@shell"
script = '''
cd ${EXAMPLE_DIR}/cmd/webp
go build -o ${OUT_DIR_ABS}/sydr_image_webp

cd ${EXAMPLE_DIR}/cmd/tiff
go build -o ${OUT_DIR_ABS}/sydr_image_tiff

cd ${EXAMPLE_DIR}/cmd/png
go build -o ${OUT_DIR_ABS}/sydr_image_png

cd ${EXAMPLE_DIR}/cmd/jpeg
go build -o ${OUT_DIR_ABS}/sydr_image_jpeg

cd ${EXAMPLE_DIR}/cmd/gif
go build -o ${OUT_DIR_ABS}/sydr_image_gif
'''

[tasks.coverage]
linux_alias = "coverage_unix"
mac_alias = "coverage_unix"
windows_alias = "unsupported"

[tasks.coverage_unix]
script_runner = "@shell"
script = '''
cd ${EXAMPLE_DIR}
${GOINSTR_COVERAGE} -i cmd/webp/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/webp/main.go
${GOINSTR_COVERAGE} -i cmd/webp/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_webp

${GOINSTR_COVERAGE} -i cmd/tiff/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/tiff/main.go
${GOINSTR_COVERAGE} -i cmd/tiff/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_tiff

${GOINSTR_COVERAGE} -i cmd/png/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/png/main.go
${GOINSTR_COVERAGE} -i cmd/png/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_png

${GOINSTR_COVERAGE} -i cmd/jpeg/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/jpeg/main.go
${GOINSTR_COVERAGE} -i cmd/jpeg/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_jpeg

${GOINSTR_COVERAGE} -i cmd/gif/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/gif/main.go
${GOINSTR_COVERAGE} -i cmd/gif/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_gif
'''

[tasks.difuzz]
linux_alias = "difuzz_unix"
mac_alias = "difuzz_unix"
windows_alias = "unsupported"

[tasks.difuzz_unix]
script_runner = "@shell"
script = '''
${DIFUZZ_DIR_ABS}/difuzz-go -c ${PROJECT_DIR}/config.toml -p ${EXAMPLE_DIR}/cmd/webp -e ${OUT_DIR_ABS}/ets_webp.toml ${DIFUZZ_ARGS}

${DIFUZZ_DIR_ABS}/difuzz-go -c ${PROJECT_DIR}/config.toml -p ${EXAMPLE_DIR}/cmd/tiff -e ${OUT_DIR_ABS}/ets_tiff.toml ${DIFUZZ_ARGS}

${DIFUZZ_DIR_ABS}/difuzz-go -c ${PROJECT_DIR}/config.toml -p ${EXAMPLE_DIR}/cmd/png -e ${OUT_DIR_ABS}/ets_png.toml ${DIFUZZ_ARGS}

${DIFUZZ_DIR_ABS}/difuzz-go -c ${PROJECT_DIR}/config.toml -p ${EXAMPLE_DIR}/cmd/jpeg -e ${OUT_DIR_ABS}/ets_jpeg.toml ${DIFUZZ_ARGS}

${DIFUZZ_DIR_ABS}/difuzz-go -c ${PROJECT_DIR}/config.toml -p ${EXAMPLE_DIR}/cmd/gif -e ${OUT_DIR_ABS}/ets_gif.toml ${DIFUZZ_ARGS}
'''

[tasks.target]
linux_alias = "target_unix"
mac_alias = "target_unix"
windows_alias = "unsupported"

[tasks.target_unix]
script_runner = "@shell"
script = '''
${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_webp.toml -l info
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR}/cmd/webp
CGO_LDFLAGS="-L${DIFUZZ_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_webp
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_webp.toml -keep-ets -l info
${GOINSTR_SANCOV} -a remove -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR} && git restore .

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_tiff.toml -l info
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR}/cmd/tiff
CGO_LDFLAGS="-L${DIFUZZ_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_tiff
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_tiff.toml -keep-ets -l info
${GOINSTR_SANCOV} -a remove -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR} && git restore .

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_png.toml -l info
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR}/cmd/png
CGO_LDFLAGS="-L${DIFUZZ_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_png
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_png.toml -keep-ets -l info
${GOINSTR_SANCOV} -a remove -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR} && git restore .

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_jpeg.toml -l info
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR}/cmd/jpeg
CGO_LDFLAGS="-L${DIFUZZ_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_jpeg
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_jpeg.toml -keep-ets -l info
${GOINSTR_SANCOV} -a remove -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR} && git restore .

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_gif.toml -l info
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR}/cmd/gif
CGO_LDFLAGS="-L${DIFUZZ_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_gif
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -e ${OUT_DIR_ABS}/ets_gif.toml -keep-ets -l info
${GOINSTR_SANCOV} -a remove -i ${EXAMPLE_DIR} -l info
cd ${EXAMPLE_DIR} && git restore .
'''
dependencies = ["difuzz"]

# Clean all built artifacts
[tasks.cleanall]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
rm -rf corpus crashes target ${CARGO_TARGET_DIR} difuzz difuzz_target_* debug_* coverage_* Cargo.lock ets.toml fuzzer.log target.log .cur_input* 
pkill difuzz_ || true
'''

[tasks.all]
linux_alias = "all_unix"
mac_alias = "all_unix"
windows_alias = "unsupported"

[tasks.all_unix]
dependencies = ["target", "debug", "coverage"]
