# Copyright 2025 ISP RAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

# Variables
[env]
PROJECT_DIR = { script = ["pwd"], condition = { env_not_set = ["PROJECT_DIR"] } }
EXAMPLE_DIR = { value = "/fyne" }
EXAMPLE_DIR_INSTR = { value = "/fyne-instr" }
DIFUZZ_DIR = { value = "/directed_target/sydr/difuzz", condition = { env_not_set = ["DIFUZZ_DIR"] } }
DIFUZZ_DIR_ABS = { script = ["realpath ${DIFUZZ_DIR}"] }
LIBFORKSERVER_DIR = { value = "${DIFUZZ_DIR_ABS}", condition = { env_not_set = ["LIBFORKSERVER_DIR"] } }
LIBFORKSERVER_DIR_ABS = { script = ["realpath ${LIBFORKSERVER_DIR}"] }
OUT_DIR = { value = "${PROJECT_DIR}", condition = { env_not_set = ["OUT_DIR"] } }
OUT_DIR_ABS = { script = ["realpath ${OUT_DIR}"] }
DIFUZZ_ARGS = { value = "--weights reverse -o difuzz -j8", condition = { env_not_set = ["DIFUZZ_ARGS"] } }
CARGO_TARGET_DIR = { value = "${PROJECT_DIR}/target", condition = { env_not_set = [
  "CARGO_TARGET_DIR",
] } }
PROFILE = { value = "release", condition = { env_not_set = ["PROFILE"] } }
FUZZER = '${DIFUZZ_DIR_ABS}/libafl_difuzz'
GOINSTR_DIFUZZ = '${DIFUZZ_DIR_ABS}/goinstr_difuzz'
GOINSTR_SANCOV = '${DIFUZZ_DIR_ABS}/goinstr_sancov'
GOINSTR_COVERAGE = '${DIFUZZ_DIR_ABS}/goinstr_coverage'

[tasks.unsupported]
script_runner = "@shell"
script = '''
echo "Cargo-make not integrated yet on this"
'''

[tasks.debug]
linux_alias = "debug_unix"
mac_alias = "debug_unix"
windows_alias = "unsupported"

[tasks.debug_unix]
script_runner = "@shell"
script = '''
cd ${EXAMPLE_DIR}/cmd/sydr_image_file
go build -o ${OUT_DIR_ABS}/sydr_image_file

cd ${EXAMPLE_DIR}/cmd/sydr_image_raster
go build -o ${OUT_DIR_ABS}/sydr_image_raster

cd ${EXAMPLE_DIR}/cmd/sydr_image_reader
go build -o ${OUT_DIR_ABS}/sydr_image_reader

cd ${EXAMPLE_DIR}/cmd/sydr_image_uri
go build -o ${OUT_DIR_ABS}/sydr_image_uri

cd ${EXAMPLE_DIR}/cmd/sydr_text_layout
go build -o ${OUT_DIR_ABS}/sydr_text_layout

cd ${EXAMPLE_DIR}/cmd/sydr_resource_uri
go build -o ${OUT_DIR_ABS}/sydr_resource_uri
'''

[tasks.coverage]
linux_alias = "coverage_unix"
mac_alias = "coverage_unix"
windows_alias = "unsupported"

[tasks.coverage_unix]
script_runner = "@shell"
script = '''
cd ${EXAMPLE_DIR}
${GOINSTR_COVERAGE} -i cmd/sydr_image_file/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/sydr_image_file/main.go
${GOINSTR_COVERAGE} -i cmd/sydr_image_file/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_file

${GOINSTR_COVERAGE} -i cmd/sydr_image_raster/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/sydr_image_raster/main.go
${GOINSTR_COVERAGE} -i cmd/sydr_image_raster/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_raster

${GOINSTR_COVERAGE} -i cmd/sydr_image_reader/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/sydr_image_reader/main.go
${GOINSTR_COVERAGE} -i cmd/sydr_image_reader/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_reader

${GOINSTR_COVERAGE} -i cmd/sydr_image_uri/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/sydr_image_uri/main.go
${GOINSTR_COVERAGE} -i cmd/sydr_image_uri/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_image_uri

${GOINSTR_COVERAGE} -i cmd/sydr_text_layout/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/sydr_text_layout/main.go
${GOINSTR_COVERAGE} -i cmd/sydr_text_layout/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_text_layout

${GOINSTR_COVERAGE} -i cmd/sydr_resource_uri/main.go -a insert -l info
go build -cover -covermode=atomic -coverpkg=./... cmd/sydr_resource_uri/main.go
${GOINSTR_COVERAGE} -i cmd/sydr_resource_uri/main.go -a remove -l info
mv main ${OUT_DIR_ABS}/coverage_resource_uri
'''

[tasks.difuzz]
linux_alias = "difuzz_unix"
mac_alias = "difuzz_unix"
windows_alias = "unsupported"

[tasks.difuzz_unix]
script_runner = "@shell"
script = '''
${DIFUZZ_DIR_ABS}/difuzz-go -r sydr_image_file.main   -c ${PROJECT_DIR}/config_image_file.toml   -p ${EXAMPLE_DIR}/cmd/sydr_image_file/main.go   -e ${OUT_DIR_ABS}/ets_image_file.toml   ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r sydr_image_raster.main -c ${PROJECT_DIR}/config_image_raster.toml -p ${EXAMPLE_DIR}/cmd/sydr_image_raster/main.go -e ${OUT_DIR_ABS}/ets_image_raster.toml ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r sydr_image_reader.main -c ${PROJECT_DIR}/config_image_reader.toml -p ${EXAMPLE_DIR}/cmd/sydr_image_reader/main.go -e ${OUT_DIR_ABS}/ets_image_reader.toml ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r sydr_image_uri.main    -c ${PROJECT_DIR}/config_image_uri.toml    -p ${EXAMPLE_DIR}/cmd/sydr_image_uri/main.go    -e ${OUT_DIR_ABS}/ets_image_uri.toml    ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r sydr_text_layout.main  -c ${PROJECT_DIR}/config_text_layout.toml  -p ${EXAMPLE_DIR}/cmd/sydr_text_layout/main.go  -e ${OUT_DIR_ABS}/ets_text_layout.toml  ${DIFUZZ_ARGS}
${DIFUZZ_DIR_ABS}/difuzz-go -r sydr_resource_uri.main -c ${PROJECT_DIR}/config_resource_uri.toml -p ${EXAMPLE_DIR}/cmd/sydr_resource_uri/main.go -e ${OUT_DIR_ABS}/ets_resource_uri.toml ${DIFUZZ_ARGS}
'''

[tasks.target]
linux_alias = "target_unix"
mac_alias = "target_unix"
windows_alias = "unsupported"

[tasks.target_unix]
script_runner = "@shell"
script = '''
${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_image_file.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/cmd/sydr_image_file
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_file
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_image_file.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_image_raster.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/cmd/sydr_image_raster
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_raster
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_image_raster.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_image_reader.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/cmd/sydr_image_reader
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_reader
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_image_reader.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_image_uri.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/cmd/sydr_image_uri
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_image_uri
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_image_uri.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_text_layout.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/cmd/sydr_text_layout
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_text_layout
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_text_layout.toml -keep-ets -l info

${GOINSTR_DIFUZZ} -a insert -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_resource_uri.toml -l info -j 8
${GOINSTR_SANCOV} -a insert -i ${EXAMPLE_DIR} -o / -l info -j 8
cd ${EXAMPLE_DIR_INSTR}/cmd/sydr_resource_uri
CGO_LDFLAGS="-L${LIBFORKSERVER_DIR_ABS}" go build -o ${OUT_DIR_ABS}/difuzz_target_resource_uri
${GOINSTR_DIFUZZ} -a remove -i ${EXAMPLE_DIR} -o / -e ${OUT_DIR_ABS}/ets_resource_uri.toml -keep-ets -l info
'''
dependencies = ["difuzz"]

# Clean all built artifacts
[tasks.cleanall]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
rm -rf corpus crashes target ${CARGO_TARGET_DIR} difuzz difuzz_target_* debug_* coverage_* Cargo.lock ets.toml fuzzer.log target.log .cur_input* 
pkill difuzz_ || true
'''

[tasks.all]
linux_alias = "all_unix"
mac_alias = "all_unix"
windows_alias = "unsupported"

[tasks.all_unix]
dependencies = ["target", "debug", "coverage"]
